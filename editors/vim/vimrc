" ~/.config/nvim/init.vim
" Author: Max Lay
if &compatible
  set nocompatible
endif

let mapleader = "\<Space>"

" Plugins
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
  Plug 'Shougo/dein.vim'
  Plug 'wsdjeg/dein-ui.vim'

  " File navigation and manipulation
  Plug 'scrooloose/nerdtree'
  " Nerdtree file browser
  let NERDTreeDirArrows=0
  let NERDTreeShowHidden=1
  nmap <F2> :NERDTreeToggle<CR>
  let NERDTreeIgnore=['\.py[co]$', '\~$']
  " Git integration
  Plug 'Xuyuanp/nerdtree-git-plugin'
  let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "●",
    \ "Staged"    : "✚",
    \ "Untracked" : "-",
    \ "Renamed"   : "r",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

  " More precise, faster matcher than CtrlP
  Plug 'junegunn/fzf', {'do': './install --all', 'merged': 0}
  Plug 'junegunn/fzf.vim'
  Plug 'pbogut/fzf-mru.vim'
  nmap <C-p> :Files<Cr>
  nmap <C-b> :Buffers<Cr>
  nmap <C-c> :Commits<Cr>
  nmap <C-n> :FZFMru<Cr>
  " Respect .gitignore
  let $FZF_DEFAULT_COMMAND = 'ag -g ""'
  let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit'
  \ }

  " Find (and replace)
  " Ag.vim deprecated. Moving to ack
  Plug 'mileszs/ack.vim'
  if executable('ag')
    let g:ackprg = 'ag --vimgrep --smart-case'
  endif
  cnoreabbrev Ag Ack!
  cnoreabbrev Ack Ack!

  Plug 'tpope/vim-abolish', {'on': ['Abolish', 'Subvert']}

  " Git
  Plug 'mattn/webapi-vim'
  Plug 'mattn/gist-vim', {'on': 'Gist'}
  Plug 'tpope/vim-fugitive'
  " Shortcuts
  map <leader>gd :Gdiff<cr>
  map <leader>gs :Gstatus<cr>
  map <leader>gb :Gblame<cr>
  map <leader>gw! :Gwrite!<cr>
  " Diffs should be vertically split!
  set diffopt+=vertical

  " Theme
  Plug 'morhetz/gruvbox'
  set background=dark
  set t_Co=256
  autocmd vimenter * colorscheme gruvbox

  " Autocomplete
  Plug 'natebosch/vim-lsc'
  let g:lsc_server_commands = {
  \  'javascript': {
  \    'command': 'typescript-language-server --stdio',
  \    'log_level': -1,
  \    'suppress_stderr': v:true
  \  },
  \  'python': {
  \    'command': 'pyls --stdio',
  \    'log_level': -1,
  \    'suppress_stderr': v:true
  \  }
  \}
  let g:lsc_auto_map = {
    \ 'GoToDefinition': '<C-]>',
    \ 'GoToDefinitionSplit': ['<C-W>]', '<C-W><C-]>'],
    \ 'FindReferences': 'gr',
    \ 'NextReference': '<C-n>',
    \ 'PreviousReference': '<C-p>',
    \ 'FindImplementations': 'gI',
    \ 'FindCodeActions': 'ga',
    \ 'Rename': 'gR',
    \ 'ShowHover': v:true,
    \ 'DocumentSymbol': 'go',
    \ 'WorkspaceSymbol': 'gS',
    \ 'SignatureHelp': 'gm',
    \ 'Completion': 'completefunc',
  \}
  let g:lsc_enable_autocomplete  = v:true
  let g:lsc_enable_diagnostics   = v:false
  let g:lsc_reference_highlights = v:false
  let g:lsc_trace_level          = 'off'
  set completeopt=preview,menu,menuone,noinsert,noselect

  " Syntax checking/linting
  Plug 'w0rp/ale'
  let b:ale_linters = [
  \ 'prospector',
  \ 'eslint', 'typescript',
  \ 'ember-template-lint',
  \ 'stylelint'
  \ ]
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '✘'
  let g:ale_sign_warning = '!'

  " Language support
  Plug 'sheerun/vim-polyglot'

  Plug 'Raimondi/delimitMate'
  let delimitMate_expand_cr = 1
  let delimitMate_expand_space = 1

  " Actions
  Plug 'scrooloose/nerdcommenter'
  let NERDSpaceDelims=1

  Plug 'FooSoft/vim-argwrap'
  " Arguments on new lines
  map <silent> <leader>a :ArgWrap<CR>

  " Fixes increment and decrement for dates/times
  Plug 'tpope/vim-speeddating'

  " Motions
  Plug 'tpope/vim-surround'

  " Text objects
  " Adds a huge number of text objects
  Plug 'wellle/targets.vim'
  " Allows simple selection of text objects (eg. viv)
  Plug 'gorkunov/smartpairs.vim'

  " Filetypes
  " Guess indents based on file and containing directory
  Plug 'tpope/vim-sleuth'
  " Respect editorconfig
  Plug 'editorconfig/editorconfig-vim'

  " Traverse the undo/redo tree
  Plug 'sjl/gundo.vim'
  nnoremap <F3> :GundoToggle<CR>
call plug#end()

" Improve startup time
set guioptions=M

" General
syntax on
filetype on
filetype plugin on
filetype indent on
" Disable safe write to fix autoreload with Parcel
set backupcopy=yes
set shell=/bin/bash
" Uncomment for mouse support
" set mouse=a
" Fix backspace
set backspace=indent,eol,start
" Disable ex mode
map q: <Nop>
nnoremap Q <nop>
" Increase command history
set history=200
" Use ; as :
nnoremap ; :
" Removes error message when navigating away from unsaved buffer
set hidden
" Saving
nmap <Leader>w :w!<cr>
" Sudo write
cmap w!! w !sudo tee % >/dev/null
" Reload file if edits happen somewhere else
set autoread
"Auto resize panes on terminal resize
autocmd VimResized * wincmd =

" Terminal setup
set termencoding=utf-8
set fileencodings=utf8,cp1251
set encoding=utf8
" fixes terminal draw bug in Tmux
set t_ut=
" Beeps off, not that I ever use a terminal that does
set noerrorbells visualbell t_vb=
if has('autocmd')
    autocmd GUIEnter * set visualbell t_vb=
endif

set autoindent
" Jump to nearest indentation
set shiftround

" Statusline stuff
" Display status line always
set laststatus=2
set ruler
set showcmd

" Ignore some file types
set wildmenu
set wildignorecase
" %% is directory containing current file
cabbr <expr> %% expand('%:p:h')
set wildignore+=.hg,.git,.svn
set wildignore+=*.pyc
set wildignore+=venv
set wildignore+=*.beam
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.class,*.o

" Display whitespace
set listchars=tab:>.,trail:.
set list

" Line numbers and limits
set number                      " Show line numbers
set relativenumber
set cc=120                       " Ver line in 120 column
set cursorline

" Search
set hlsearch                    " Highlight searches
set incsearch                   " Highlight dynamically as pattern is typed
set ignorecase                  " Ignore case of searches
" Leader / to clear search highligting
nmap <Leader>/ :nohlsearch<CR>

" Allows undo after file is closed
if exists("&undodir")
    set undofile
    set undodir=/tmp
endif
" Swap files and backup are super annoying. I save often
set noswapfile
set nobackup

" Movement
set scrolloff=8                 " Start scrolling n lines before border
" Scroll wrapped lines normally
noremap  <buffer> <silent> k gk
noremap  <buffer> <silent> j gj
" End of line
inoremap <C-e> <C-o>$
" Start of line
inoremap <C-a> <C-o>^

"Easy ways of getting into normal mode
inoremap kk <ESC>
inoremap jj <ESC>

" Spelling
" Pressing ,ss will toggle and untoggle spell checking
setlocal spell spelllang=en_gb
setlocal nospell
map <leader>ss :setlocal spell!<cr>
" Add word to spellfile
map <leader>sa zg
" Suggest spelling
map <leader>s? z=

" Make it easier to navigate windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Vimrc shortcuts
nmap <silent> <Leader>ev :tabe $MYVIMRC<CR>

" Newline
map <Leader>o o<Esc>
map <Leader>O O<Esc>


" Copy, paste and cut to system clipboard
map <Leader>y "+y
map <Leader>x "+d
map <Leader>p :set paste<CR>"+p:set nopaste<CR>
map <Leader>P :set paste<CR>"+P:set nopaste<CR>
" Copy to end of line
noremap Y y$
