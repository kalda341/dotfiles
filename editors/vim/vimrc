" ~/.config/nvim/init.vim
" Author: Max Lay
if &compatible
  set nocompatible
endif

let mapleader = "\<Space>"

" Plugins
" Add the dein installation directory into runtimepath
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim
call dein#begin(expand('~/.vim/dein')) " plugins' root path
  call dein#add('Shougo/dein.vim')

  " File navigation and manipulation
  call dein#add('scrooloose/nerdtree')
  " Nerdtree file browser
  let NERDTreeDirArrows=0
  let NERDTreeShowHidden=1
  nmap <F2> :NERDTreeToggle<CR>
  let NERDTreeIgnore=['\.py[co]$', '\~$']
  " Git integration
  call dein#add('Xuyuanp/nerdtree-git-plugin')
  let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "●",
    \ "Staged"    : "✚",
    \ "Untracked" : "-",
    \ "Renamed"   : "r",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

  " More precise, faster matcher than CtrlP
  call dein#add('junegunn/fzf', {'build': './install --all', 'merged': 0})
  call dein#add('junegunn/fzf.vim', {'depends': 'fzf'})
  call dein#add('pbogut/fzf-mru.vim', {'depends': 'fzf'})
  nmap <C-p> :Files<Cr>
  nmap <C-b> :Buffers<Cr>
  nmap <C-c> :Commits<Cr>
  nmap <C-n> :FZFMru<Cr>
  " Respect .gitignore
  let $FZF_DEFAULT_COMMAND = 'ag -g ""'
  let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit'
  \ }

  " Find (and replace)
  call dein#add('rking/ag.vim', {'on_cmd': ['Ag']})
  call dein#add('tpope/vim-abolish', {'on_cmd': ['Abolish', 'Subvert']})

  " Git
  call dein#add('mattn/webapi-vim')
  call dein#add('mattn/gist-vim', {'on_cmd': ['Gist'], 'depends': 'webapi-vim'})
  call dein#add('tpope/vim-fugitive')
  " Shortcuts
  map <leader>gd :Gdiff<cr>
  map <leader>gs :Gstatus<cr>
  map <leader>gb :Gblame<cr>
  map <leader>gw! :Gwrite!<cr>
  " Diffs should be vertically split!
  set diffopt+=vertical

  " Tmux
  call dein#add('christoomey/vim-tmux-navigator')
  call dein#add('tmux-plugins/vim-tmux-focus-events')

  " Theme
  call dein#add('morhetz/gruvbox')
  set background=dark
  set t_Co=256
  colorscheme gruvbox

  " Autocomplete
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif
  call dein#add('Shougo/deoplete.nvim', {'depends': ['nvim-yarp', 'vim-hug-neovim-rpc']})
  let g:deoplete#enable_at_startup = 1
  call dein#add('Raimondi/delimitMate', {'on_map': { 'i' : ['(', '[', '{', '<']}})
  let delimitMate_expand_cr = 1
  let delimitMate_expand_space = 1

  " Actions
  call dein#add('scrooloose/nerdcommenter')
  let NERDSpaceDelims=1

  call dein#add('FooSoft/vim-argwrap')
  " Arguments on new lines
  map <silent> <leader>a :ArgWrap<CR>

  " Allows repeat to be used with some plugins
  call dein#add('tpope/vim-repeat')
  " Fixes increment and decrement for dates/times
  call dein#add('tpope/vim-speeddating', {'on_map': ['<c-a>', '<c-x>']})

  " Motions
  call dein#add('tpope/vim-surround', {'on_map': {'n': ['cs', 'ds', 'ys'], 'x': 'S'}, 'depends': 'vim-repeat'})
  call dein#add('easymotion/vim-easymotion')
  call dein#add('godlygeek/tabular', {'on_cmd': ['Tab', 'Tabularize'] , 'augroup': 'tabular'})

  " Text objects
  " Adds function/list/tuple argument object support
  call dein#add('b4winckler/vim-angry')
  " Adds a huge number of text objects
  call dein#add('wellle/targets.vim')
  " Allows simple selection of text objects (eg. viv)
  call dein#add('gorkunov/smartpairs.vim')

  " Syntax checking/linting
  call dein#add('w0rp/ale')
  let b:ale_linters = [
  \ 'flake8', 'pylint',
  \ 'eslint',
  \ 'ember-template-lint',
  \ 'stylelint'
  \ ]
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '✘'
  let g:ale_sign_warning = '!'

  " Snippets
  call dein#add('SirVer/ultisnips')
  let g:UltiSnipsEditSplit="vertical"
  let g:UltiSnipsExpandTrigger="<c-k>"
  let g:UltiSnipsJumpForwardTrigger="<c-l>"
  let g:UltiSnipsJumpBackwardTrigger="<c-h>"
  call dein#add('honza/vim-snippets')

  " Filetypes
  " Guess indents based on file and containing directory
  call dein#add('tpope/vim-sleuth')
  " Respect editorconfig
  call dein#add('editorconfig/editorconfig-vim')

  " Erlang
  call dein#add('vim-erlang/vim-erlang-tags', {'on_ft': 'erlang'})
  call dein#add('vim-erlang/vim-erlang-compiler', {'on_ft': 'erlang'})
  call dein#add('vim-erlang/vim-erlang-omnicomplete', {'on_ft': 'erlang'})
  call dein#add('vim-erlang/vim-erlang-runtime', {'on_ft': 'erlang'})
  call dein#add('vim-erlang/erlang-motions.vim', {'on_ft': 'erlang'})
  call dein#add('vim-erlang/vim-dialyzer', {'on_ft': 'erlang'})
  call dein#add('vim-erlang/vim-rebar', {'on_ft': 'erlang'})

  " Ember
  " We can't load on_ft, because the plugin defines the filetype
  call dein#add('joukevandermaas/vim-ember-hbs')

  " Traverse the undo/redo tree
  call dein#add('sjl/gundo.vim')
  nnoremap <F3> :GundoToggle<CR>

call dein#end()

" Improve startup time
set guioptions=M

" General
syntax on
filetype on
filetype plugin on
filetype indent on
set shell=/bin/bash
" Uncomment for mouse support
" set mouse=a
" Fix backspace
set backspace=indent,eol,start
" Disable ex mode
map q: <Nop>
nnoremap Q <nop>
" Increase command history
set history=200
" Use ; as :
nnoremap ; :
" Removes error message when navigating away from unsaved buffer
set hidden
" Saving
nmap <Leader>w :w!<cr>
" Sudo write
cmap w!! w !sudo tee % >/dev/null
" Reload file if edits happen somewhere else
set autoread
"Auto resize panes on terminal resize
autocmd VimResized * wincmd =

" Terminal setup
set termencoding=utf-8
set fileencodings=utf8,cp1251
set encoding=utf8
" fixes terminal draw bug in Tmux
set t_ut=
" Beeps off, not that I ever use a terminal that does
set noerrorbells visualbell t_vb=
if has('autocmd')
    autocmd GUIEnter * set visualbell t_vb=
endif

set autoindent
" Jump to nearest indentation
set shiftround

" Statusline stuff
" Display status line always
set laststatus=2
set ruler
set showcmd

" Ignore some file types
set wildmenu
set wildignorecase
" %% is directory containing current file
cabbr <expr> %% expand('%:p:h')
set wildignore+=.hg,.git,.svn
set wildignore+=*.pyc
set wildignore+=venv
set wildignore+=*.beam
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.class,*.o

" Display whitespace
set listchars=tab:>.,trail:.
set list

" Line numbers and limits
set number                      " Show line numbers
set relativenumber
set cc=120                       " Ver line in 120 column
set cursorline

" Search
set hlsearch                    " Highlight searches
set incsearch                   " Highlight dynamically as pattern is typed
set ignorecase                  " Ignore case of searches
" Leader / to clear search highligting
nmap <Leader>/ :nohlsearch<CR>

" Allows undo after file is closed
if exists("&undodir")
    set undofile
    set undodir=/tmp
endif
" Swap files and backup are super annoying. I save often
set noswapfile
set nobackup

" Movement
set scrolloff=8                 " Start scrolling n lines before border
" Scroll wrapped lines normally
noremap  <buffer> <silent> k gk
noremap  <buffer> <silent> j gj
" End of line
inoremap <C-e> <C-o>$
" Start of line
inoremap <C-a> <C-o>^

"Easy ways of getting into normal mode
inoremap kk <ESC>
inoremap jj <ESC>

" Set cursorcolumn
nmap <Leader>scc :set cuc<CR>
nmap <Leader>Scc :set nocuc<CR>

"Buffers
noremap <silent><Leader>bp :bprevious<CR>
noremap <silent><Leader>bn :bnext<CR>
noremap <silent><Leader>bc :bd<CR>

"Tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Changlist
noremap <silent><Leader>cp :cprev<CR>
noremap <silent><Leader>cn :cnext<CR>

" Quickfix
noremap <Leader>q :copen<CR>
noremap <Leader>Q :cclose<CR>
noremap gn :cn<CR>
noremap gp :cp<CR>

" Spelling
" Pressing ,ss will toggle and untoggle spell checking
setlocal spell spelllang=en_gb
setlocal nospell
map <leader>ss :setlocal spell!<cr>
" Next, previous
map <leader>sn ]s
map <leader>sp [s
" Add word to spellfile
map <leader>sa zg
" Suggest spelling
map <leader>s? z=

" Make it easier to navigate windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Vimrc shortcuts
nmap <silent> <Leader>ev :tabe $MYVIMRC<CR>
nmap <silent> <Leader>sv :so $MYVIMRC<CR>
nmap <silent> <Leader>bi :BundleInstall<CR>

" Newline
map <Leader>o o<Esc>
map <Leader>O O<Esc>

" Copy, paste and cut to system clipboard
map <Leader>y "+y
map <Leader>x "+d
map <Leader>p :set paste<CR>"+p:set nopaste<CR>
map <Leader>P :set paste<CR>"+P:set nopaste<CR>
" Copy to end of line
noremap Y y$

" Run line in shell
map <Leader>r :exec '!'.getline('.')<CR>
" Run line in shell and insert output below
" TODO
